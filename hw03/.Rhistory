teams <- dat1 %>%
group_by(team) %>%
summarise(experience = round(sum(experience), digits = 2),
salary = round(sum(salary/1000000), digits = 2),
points3 = sum(points3_made),
points2 = sum(points2_made),
free_throws = sum(points1_made),
points = sum(free_throws + points2 + points3),
off_rebounds = sum(off_rebounds),
def_rebounds = sum(def_rebounds),
assists = sum(assists),
steals = sum(steals),
blocks = sum(blocks),
turnovers = sum(turnovers),
fouls = sum(fouls),
efficiency = sum(efficiency))
summary(teams)
teams <- dat1 %>%
group_by(team) %>%
summarise(experience = round(sum(experience), digits = 2),
salary = round(sum(salary/1000000), digits = 2),
points3 = sum(points3_made),
points2 = sum(points2_made),
free_throws = sum(points1_made),
points = sum(sum(points1_made) + sum(points2_made) + sum(points3_made)),
off_rebounds = sum(off_rebounds),
def_rebounds = sum(def_rebounds),
assists = sum(assists),
steals = sum(steals),
blocks = sum(blocks),
turnovers = sum(turnovers),
fouls = sum(fouls),
efficiency = sum(efficiency))
summary(teams)
stars(teams[ ,-1], labels = teams$team)
?stars
stars(teams[ ,], labels = teams$team)
str(teams)
dat[, 1]
?cex
?plot
?read_csv
?par
??cex.names
?sort
0 == T
2 == T
?:
?":"
?comma
?colon
?semicolon
?";"
f <- function(x) {
x*x
}
f(2)
f(-5)
g(0)
g <- function(x) {
2*x +5
}
f(2)
f(-5)
g(0)
g(-5/2)
fog <- function(x) {
f(g(x))
}
gof <- function(x) {
g(f(x))
}
fog(2)
fog(-5)
gof(0)
gof(-5/2)
pythagoras <- function(a,b) {
c = sqrt(a^2 + b^2)
}
pythagoras(3,4)
pythagoras <- function(a,b) {
sqrt(a^2 + b^2)
}
pythagoras(3,4)
pythagoras <- function(a) {
sqrt(2*a^2)
}
pythagoras(5)
miles2kms <- function(x) {
1.6*x
}
c1 <- 1:10
c2 <- seq(from=10, to=100, by=10)
c <- c1:c2
c
?join
c3 <- c(c1,c2)
c3
?table
c4 <- miles2kms(c3)
table(c3,c4)
data.frame(c3,c4)
miles <- c(c1,c2)
kms <- miles2kms(c3)
miles <- c(c1,c2)
kms <- miles2kms(c3)
data.frame(miles,kms)
gallon2liters <- function(x){
3.78541*x
}
data.frame(miles,kms)
liters2gallons <- function(x){
x/gallons2liters(1)
}
liters = c(c1,c2)
gallons = liters2gallons(liters)
gallons2liters <- function(x){
3.78541*x
}
liters2gallons <- function(x){
x/gallons2liters(1)
}
liters = c(c1,c2)
gallons = liters2gallons(liters)
data.frame(liters, gallons)
seconds2years <- function(x){
x/60/60/24/365
}
seconds2years(1000000000)
gaussian <- function(x,m,s){
(1/s*sqrt(2*pi))*exp((-1/2)*((x-m)/s)^2)
}
gaussian(1,0,2)
dnorm(x = 1, mean = 0, sd = 2)
gaussian <- function(x,m,s){
(1/(s*sqrt(2*pi)))*exp((-1/2)*((x-m)/s)^2)
}
gaussian(1,0,2)
x_values <- seq(from = -4.5, to = 4.5, by = 0.1)
y_values <- dnorm(x_values, mean = 0, sd = 2)
plot(x_values, y_values, las = 1, type = "l", lwd = 2)
y_values2 <- gaussian(x_values, 0, 2)
plot(x_values, y_values2, las = 1, type = "l", lwd = 2)
?seq
?plot
?abline
poly2 <- function(x){
x*x*x
}
x2 <- seq(from = -4, to = 4, length.out = 20)
y <- poly2(x2)
plot(x, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
x2 <- seq(from = -4, to = 4, length.out = 20)
y <- poly2(x2)
plot(x2, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', x^3)))
poly3 <- function(x){
(x^2-1)*(x+3)^3
}
x3 <- seq(from = -4, to = 4, length.out = 20)
y <- poly(x3)
plot(x3, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', (x^2-1), (x + 3)^3)))
poly4 <- function(x){
(x^2-1)*(x^2-9)
}
x4 <- seq(from = -4, to = 4, length.out = 20)
y <- poly(x4)
plot(x4, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', (x^2-1), (x + 3)^3)))
poly3 <- function(x){
(x^2-1)*(x+3)^3
}
x3 <- seq(from = -4, to = 4, length.out = 20)
y <- poly3(x3)
plot(x3, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', (x^2-1), (x + 3)^3)))
poly4 <- function(x){
(x^2-1)*(x^2-9)
}
x4 <- seq(from = -4, to = 4, length.out = 20)
y <- poly4(x4)
plot(x4, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', (x^2-1), (x + 3)^3)))
x <- 1:5
descriptive <- function(x) {
min = min(x)
mean = mean(x)
max = max(x)
}
c(min, mean, max)
x <- 1:5
descriptive(1:5)
descriptive <- function(x) {
min = min(x)
mean = mean(x)
max = max(x)
}
descriptive(1:5)
descriptive <- function(x) {
min(x)
mean(x)
max(x)
}
descriptive(1:5)
?quartile
?quantile
descriptive <- function(x) {
c("min" = min(x), "mean" = mean(x), "max" = max(x), "range" = max(x) = min(x), "q1" = quantile(x, probs = 0.25), "q3" = quantile(x, probs = 0.75), "iqr" = quantile(x, probs = 0.75) - quantile(x, probs = 0.25), "sd" = sd(x))
descriptive <- function(x) {
c("min" = min(x), "mean" = mean(x), "max" = max(x), "range" = max(x) - min(x), "q1" = quantile(x, probs = 0.25), "q3" = quantile(x, probs = 0.75), "iqr" = quantile(x, probs = 0.75) - quantile(x, probs = 0.25), "sd" = sd(x))
}
descriptive(1:5)
?function
)
??function
)
?"function"
combinations <- function(n,k){
factorial(n)/(factorial(k)*factorial(n-k))
}
combinations(n = 5, k = 2)
binom_prob <- function(n,k,prob){
choose(n,k)*prob^k*(1-prob)^(n-k)
}
binom_prob(n = 5, k = 2, prob = 0.5)
binom_prob(5,4,0.35) + binom_prob(5,5,0.35)
binom_prob(10,3,1/6)
z <- 100*pi
if (z<0) { z = 0
} else if (z>100) { z = 100
} else {z
}
if (z<0) { z = 0
} else if (z>100) { z = 100
} else {z
}
z
if (z<0) { z = 0
} else if (z>100) { z = 100
} else {z
}
is_even <- function(x){
if (is.numeric(x)==F) {
print("NA")
}
else
if (is.integer(x/2) == T) {
print("TRUE")
}
else if (is.integer(x/2) == F) {
print("FALSE")
}
}
is_even(10)
# odd number
is_even(33)
# not a number
is_even('a')
is.integer(10)
is.numeric(10)
as.integer(3.5)
is_even <- function(x){
if (is.numeric(x)==F) {
print("NA")
}
else
if (as.integer(x/2) == x/2) {
print("TRUE")
}
else if (as.integer(x/2) != x/2) {
print("FALSE")
}
}
is_even(10)
# odd number
is_even(33)
# not a number
is_even('a')
is_odd <- function(x) {
if (is_even(x) == "NA") {
print("NA")
}
else
if (is_even(x) == "FALSE") {
print ("TRUE")
}
else if (is_even(x) == "TRUE"){
print("FALSE")
}
}
is_odd(1)
# even number
is_odd(4)
# not a number
is_odd('a')
is_odd(3)
is_even(3)
is_even(3) == "NA"
is_odd <- function(x) {
is_even(x)
if (is_even(x) == "NA") {
print("NA")
}
else
if (is_even(x) == "FALSE") {
print ("TRUE")
}
else if (is_even(x) == "TRUE"){
print("FALSE")
}
}
is_odd(1)
# even number
is_odd(4)
# not a number
is_odd('a')
is_odd <- function(x) {
x <- is_even(x)
if (x == "NA") {
print("NA")
}
else
if (x == "FALSE") {
print ("TRUE")
}
else if (x == "TRUE"){
print("FALSE")
}
}
is_odd(1)
# even number
is_odd(4)
# not a number
is_odd('a')
is_odd <- function(x) {
y <- is_even(x)
if (y == "NA") {
print("NA")
}
else
if (y == "FALSE") {
print ("TRUE")
}
else if (y == "TRUE"){
print("FALSE")
}
}
is_odd(1)
is_odd <- function(x) {
y <- is_even(x)
if (y == "NA") {
print("NA")
}
else
if (y == FALSE) {
print ("TRUE")
}
else if (y == TRUE){
print("FALSE")
}
}
is_odd(1)
y
y <- is_even(1)
is_odd <- function(x) {
if (is_even(x) == "NA") {
print("NA")
}
else
if (is_even(x) == "FALSE") {
print ("TRUE")
}
else if (is_even(x) == "TRUE"){
print("FALSE")
}
}
is_odd(1)
is_odd(2)
is_odd('a')
%%(2)
is_even <- function(x){
if (is.numeric(x)==F) {
print(NA)
}
else if (as.integer(x/2) == x/2) {
print(TRUE)
}
else if (as.integer(x/2) != x/2) {
print(FALSE)
}
}
is_even(10)
# odd number
is_even(33)
# not a number
is_even('a')
is_odd <- function(x) {
if (is.na(is_even(x))) {
print(NA)
} else if (is_even(x) == FALSE) {
print (TRUE)
} else if (is_even(x) == TRUE){
print(FALSE)
}
}
is_odd(1)
# even number
is_odd(4)
# not a number
is_odd('a')
is_odd <- function(x) {
!is_even(x)
}
is_odd(1)
# even number
is_odd(4)
# not a number
is_odd('a')
is_even <- function(x){
if (is.numeric(x)==F) {
print(NA)
}
else if (as.integer(x/2) == x/2) {
print(TRUE)
}
else if (as.integer(x/2) != x/2) {
print(FALSE)
}
}
# even number
is_even(10)
# odd number
is_even(33)
# not a number
is_even('a')
is_odd <- function(x) {
!is_even(x)
}
# odd number
is_odd(1)
# even number
is_odd(4)
# not a number
is_odd('a')
is_even <- function(x){
if (is.numeric(x)==F) {
print(NA)
}else if (as.integer(x/2) == x/2) {
print(TRUE)
}else if (as.integer(x/2) != x/2) {
print(FALSE)
}
}
is_even(2)
is_even(0)
is_even(1)
is_even(NA)
is_even(-1)
is_even(-2)
is_even(-2)
!is_even(-2)
is_odd <- function(x){
return(!is_even(x))
}
is_odd(2)
is_even <- function(x){
if (is.numeric(x)==F) {
out <- NA
}else if (as.integer(x/2) == x/2) {
out <- TRUE
}else if (as.integer(x/2) != x/2) {
out <- FALSE
}
}
is_odd(2)
is_odd(1)
is_odd(5)
is_even <- function(x){
if (is.numeric(x)==F) {
out <- NA
}else if (as.integer(x/2) == x/2) {
out <- TRUE
}else if (as.integer(x/2) != x/2) {
out <- FALSE
}
return(out)
}
is_odd(1)
# even number
is_odd(4)
# not a number
is_odd('a')
1&2
1|2
2
!1
!1|2
0&2
head(dat)
library(deplyr)
library(dplyr)
dat %>% summarise(avg_minutes = mean(minutes))
dat %>% select(height) %>% summarise(avg_minutes = mean(minutes))
dat %>% select(minutes %>% summarise(avg_minutes = mean(minutes))
)
dat %>% select (minutes) %>% summarise (avg_minutes = mean (minutes))
